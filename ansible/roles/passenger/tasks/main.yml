---
# nginx + passenger tasks
- name: install PGP key supprt
  apt: pkg={{ item }} state=latest
  become: true
  with_items:
    - dirmngr
    - gnupg

- name: add passenger PGP key
  apt_key: keyserver=keyserver.ubuntu.com id=561F9B9CAC40B2F7 state=present
  become: true

- name: add passenger apt repo
  apt_repository: repo='deb https://oss-binaries.phusionpassenger.com/apt/passenger {{ ansible_distribution_release }} main' state=present
  become: true
  register: passenger_repo

- name: apt-get update
  apt:
    update_cache: yes
  become: true
  when: passenger_repo.changed

- name: install nginx for 20.04
  apt: pkg=nginx state=latest
  become: true
  when: ansible_distribution_version == "20.04"

- name: install passenger module for 16.04
  apt: pkg=passenger state=latest
  become: true
  when: ansible_distribution_version == "16.04"

- name: install passenger module for 20.04
  apt: pkg=libnginx-mod-http-passenger state=latest
  become: true
  when: ansible_distribution_version == "20.04"

- name: install passenger dependencies
  apt: pkg={{ item }} state=latest
  become: true
  with_items:
    - apt-transport-https
    - ca-certificates
    - nginx-extras
  notify: restart nginx

- name: re-configure nginx
  copy: src=etc/nginx/nginx.conf dest=/etc/nginx/nginx.conf
  become: true

- name: set passenger module config
  copy: src=etc/nginx/conf.d/mod-http-passenger.conf dest=/etc/nginx/conf.d/mod-http-passenger.conf
  become: true
  notify: restart nginx

- name: disable the default nginx config
  file: path={{ item }} state=absent
  become: true
  with_items:
    - /etc/nginx/sites-enabled/default
  notify: restart nginx

- name: get installed site configs
  shell: ls -1 /etc/nginx/sites-available
  register: sites_available_contents

- name: delete unmanaged site configs from sites-available
  file: path=/etc/nginx/sites-available/{{ item }} state=absent
  with_items: sites_available_contents.stdout_lines
  when: item not in "{{ nginx_sites }}"
  become: true
  notify: restart nginx

- name: get enabled site configs
  shell: ls -1 /etc/nginx/sites-enabled
  register: sites_enabled_contents

- name: delete unmanaged site configs from sites-enabled
  file: path=/etc/nginx/sites-enabled/{{ item }} state=absent
  with_items: sites_enabled_contents.stdout_lines
  when: item not in "{{ nginx_sites }}"
  become: true
  notify: restart nginx

- name: add site configs
  copy: >
    src=etc/nginx/sites-available/{{ item }}
    dest=/etc/nginx/sites-available/{{ item }}
  become: true
  with_items: "{{ nginx_sites }}"
  notify: restart nginx

- name: enable site configs
  file: >
    state=link
    src=/etc/nginx/sites-available/{{ item }}
    dest=/etc/nginx/sites-enabled/{{ item }}
  become: true
  with_items: "{{ nginx_sites }}"
  notify: restart nginx

- name: enable monit for nginx
  file: >
    state=link
    src=/etc/monit/conf-available/nginx
    dest=/etc/monit/conf-enabled/nginx
  become: true
  notify: restart monit

- name: generate Diffie-Hellman params for nginx SSL
  command: openssl dhparam -out /etc/ssl/dhparam.pem 2048
  args:
    creates: /etc/ssl/dhparam.pem
  become: true
  notify: restart nginx

- name: load SSL cert files
  include_vars: "ssl-vault.yml"
  no_log: true

- name: copy SSL cert files
  copy:
    dest: "{{ item.key }}"
    content: "{{ item.value.content }}"
    owner: "{{ item.value.owner }}"
    group: "{{ item.value.group }}"
    mode: "{{ item.value.mode }}"
  with_dict: "{{ ssl_cert_files }}"
  no_log: true
  become: true
  notify: restart nginx
